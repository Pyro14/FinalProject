[1mdiff --git a/database/users.db b/database/users.db[m
[1mindex 0fcf692..d4dbdf2 100644[m
Binary files a/database/users.db and b/database/users.db differ
[1mdiff --git a/main.py b/main.py[m
[1mindex bf045d6..1864c75 100644[m
[1m--- a/main.py[m
[1m+++ b/main.py[m
[36m@@ -3,8 +3,9 @@[m [mfrom tkinter import ttk[m
 import sqlite3 as sql[m
 from tkinter import *[m
 from PIL import Image, ImageTk[m
[32m+[m[32mfrom docutils.nodes import entry[m
 [m
[31m-db_path = "C:/Users/manuf/PycharmProjects/Final Project/database/users.db"[m
[32m+[m[32mdb_path = "C:/Users/manuf/PycharmProjects/FinalProject/database/users.db"[m
 [m
 #class for the main window[m
 class MainWindow:[m
[36m@@ -137,7 +138,7 @@[m [mclass MainWindow:[m
         columns_by_table = {[m
             'movies': ["id", "name", "release_date", "director","duration_min"],[m
             'series': ["id", "name", "num_season", "episodes"],[m
[31m-            'users': ["id", "name", "num_season", "episodes"],[m
[32m+[m[32m            'users': ["id", "username", "password", "dev"],[m
         }[m
 [m
         columns = columns_by_table[table][m
[36m@@ -154,49 +155,53 @@[m [mclass MainWindow:[m
             editor_frame = Frame(self.window)[m
             editor_frame.pack(pady=20)[m
 [m
[31m-            for column in columns_by_table:[m
[31m-                Label(editor_frame, text=f"{column}")[m
[32m+[m[32m            entries ={}[m
[32m+[m[32m            for i, column in enumerate(columns[1:]):[m
[32m+[m[32m                Label(editor_frame, text=f"{table} {column}").grid(row=0, column=i)[m
[32m+[m[32m                entry = Entry(editor_frame)[m
[32m+[m[32m                entry.grid(row=1, column=i)[m
[32m+[m[32m                entries[column] = entry[m
 [m
[31m-         #   Label(editor_frame, text="Movie name: ").grid(row=0, column=0)[m
[31m-         #   name_entry = Entry(editor_frame)[m
[31m-          #  name_entry.grid(row=0, column=1)[m
 [m
[31m-          #  Label(editor_frame, text="Release date: ").grid(row=1, column=0)[m
[31m-          #  date_entry = Entry(editor_frame)[m
[31m-          #  date_entry.grid(row=1, column=1)[m
[32m+[m[32m            def func():[m
[32m+[m[32m                data = [ entries[col].get() for col in columns[1:]][m
[32m+[m[32m                self.add_to_database(table, columns[1:], data, title)[m
 [m
[31m-          #  Label(editor_frame, text="Director: ").grid(row=0, column=2)[m
[31m-          #  director_entry = Entry(editor_frame)[m
[31m-           # director_entry.grid(row=0, column=3)[m
[32m+[m[32m            Button(editor_frame, text=f"Add {table}", command=func).grid(row=1, column=5, pady=10)[m
[32m+[m[32m            Button(editor_frame, text=f"Delete {title}", command=self.del_database_data()).grid(row=0, column=5, pady=10)[m
 [m
[31m-           # Label(editor_frame, text="Movie durarion: ").grid(row=1, column=2)[m
[31m-           # duration_min_entry = Entry(editor_frame)[m
[31m-           # duration_min_entry.grid(row=1, column=3)[m
[31m-[m
[31m-            Button(editor_frame, text="Add movie", command=lambda: self.add_movie( name_entry.get(), date_entry.get(), director_entry.get(), duration_min_entry.get())).grid(row=0, column=5, pady=10)[m
[31m-            Button(editor_frame, text="Delete movie", command=self.del_movie).grid(row=1, column=5, pady=10)[m
[31m-[m
[31m-    def add_movie(self,name, release_date, director,duration_min):[m
[32m+[m[32m    def add_to_database (self,table, columns, data, title):[m
         con = sql.connect(db_path)[m
         cur = con.cursor()[m
[31m-        cur.execute("INSERT INTO movies (name, release_date, director,duration_min) VALUES (?, ?, ?, ?)", (name, release_date, director,duration_min))[m
[32m+[m[32m        qs = ', '.join(['?' for _ in range(len(columns))])[m
[32m+[m[32m        cols = ', '.join(columns)[m
[32m+[m[32m        cur.execute(f"INSERT INTO {table} ({cols}) VALUES ({qs})", data)[m
         con.commit()[m
         con.close()[m
[31m-        self.movie_catalog()[m
[32m+[m[32m        self.catalog(title,table)[m
 [m
[31m-    def del_movie(self):[m
[32m+[m[32m    def del_database_data(self,table,columns,title):[m
[32m+[m[32m        con = sql.connect(db_path)[m
[32m+[m[32m        cur = con.cursor()[m
         selected = self.table.selection()[m
         if not selected:[m
             return[m
         item=self.table.item(selected)[m
[31m-        movie_id = item["values"][0][m
[31m-        con = sql.connect(db_path)[m
[31m-        cur = con.cursor()[m
[31m-        cur.execute("DELETE FROM movies WHERE id = ?", (movie_id,))[m
[31m-        con.commit()[m
[31m-        con.close()[m
[31m-[m
[31m-        self.movie_catalog()[m
[32m+[m[41m        [m
[32m+[m
[32m+[m[32m    #def del_movie(self):[m
[32m+[m[32m        #selected = self.table.selection()[m
[32m+[m[32m        #if not selected:[m
[32m+[m[32m            #return[m
[32m+[m[32m        #item=self.table.item(selected)[m
[32m+[m[32m        #movie_id = item["values"][0][m
[32m+[m[32m        #con = sql.connect(db_path)[m
[32m+[m[32m        #cur = con.cursor()[m
[32m+[m[32m        #cur.execute("DELETE FROM movies WHERE id = ?", (movie_id,))[m
[32m+[m[32m        #con.commit()[m
[32m+[m[32m        #con.close()[m
[32m+[m
[32m+[m[32m        #self.movie_catalog()[m
 [m
 [m
     def movie_catalog(self):[m
